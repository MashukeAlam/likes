<div class="flex">
  <div>
    <button onclick="fetchAllContents('<%= @feature.feature_name %>')" id="startButton" class="btn btn-primary">Start Watching</button>
    <div id="player"></div>
  </div>

  <div class="flex items-center justify-center w-full p-5 font-large">
    <p id="notice">Earn credits after watching videos for 10 seconds...</p>
  </div>
</div>
<script>
    let videoData = []
    let currVideoIndex = 0;
    let isPlayerReady = false;
    const notice = document.getElementById('notice');
    const tag = document.createElement('script');
    const userId = <%= current_user.id %>;

    tag.src = "https://www.youtube.com/iframe_api";

    const firstScriptTag = document.getElementsByTagName('script')[0];

    var player;

    function extractYouTubeVideoID(url) {
        try {
            const regex = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:shorts\/|watch\?v=|embed\/|[^\/\n\s]+\/\S+\/)|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
            const match = url.match(regex);
            if (match && match[1]) {
                return match[1];
            } else {
                throw new Error("Invalid YouTube URL");
            }
        } catch (error) {
            return error.message;
        }
    }

    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: extractYouTubeVideoID(videoData[currentVideoIndex]['link']) || 'jNQXAC9IVRw',
            playerVars: {
                'playsinline': 1
            },
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    function onPlayerReady(event) {
        notice.innerHTML = `You will get ${videoData[currVideoIndex]['reward']} credits after watching this video...`;
        isPlayerReady = true;
    }

    var done = false;
    function onPlayerStateChange(event) {
        if (event.data === YT.PlayerState.PLAYING && !done) {
            setTimeout(() => {
                stopVideo();
                currVideoIndex = (currVideoIndex + 1) % videoData.length; // Move to the next video
                loadNextVideo();
                notice.innerHTML = `You will get ${videoData[currVideoIndex]['reward']} credits after watching this video...`;
            }, 10000); // Play for 10 seconds before switching
            done = true;
        }
    }

    function stopVideo() {
        player.stopVideo();
    }

    function loadNextVideo() {
        const apiUrl = '/feature_consumptions';
        const payload = {
            feature_consumption: {
                user_id: userId,
                feature_id: videoData[currVideoIndex]['id'],
                consumption_type: 'watch'     // Can be 'watch' or 'like'
            }
        };

        fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content // For Rails CSRF protection
            },
            body: JSON.stringify(payload)
        })
          .then(response => {
              if (!response.ok) {
                  throw new Error(`HTTP error! Status: ${response.status}`);
              }
              return response.json();
          })
          .then(data => {
              updateCreditDisplay(data.data);
          })
          .catch(error => {
              console.error('Error:', error);
          });

        player.loadVideoById(extractYouTubeVideoID(videoData[currVideoIndex]['link']));
        done = false; // Reset to allow playing the new video for 10 seconds
    }
</script>